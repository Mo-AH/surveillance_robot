<launch>
    <!-- Run the architecture's component and allow to test it by changing the battery state manually or randomly. -->

    <rosparam param="test/random_sense/active"> False </rosparam>

    <rosparam param="test/plan_points"> [4,5] </rosparam>
    <rosparam param="test/plan_time"> [0.1, 0.2] </rosparam>
    <rosparam param="test/motion_time"> [0.1, 0.2] </rosparam>
    <rosparam param="test/checking_time">1</rosparam>
    <rosparam param="test/charging_time">3</rosparam>

    <rosparam param="state/initial_pose"> [0.0,  0.0] </rosparam>
    <rosparam param="config/environment_size"> [10.0, 10.0] </rosparam>

    <node pkg="armor"
          type="execute"
          name="armor_service"
          args="it.emarolab.armor.ARMORMainService"
          launch-prefix = "xterm -e"
          output = "screen"
    > </node>

    <node pkg = "surveillance_robot"  
          type = "smach_robot.py" 
          name = "smach_robot"
          output = "screen"
    > </node>

    <node pkg = "surveillance_robot"  
          type = "map_builder.py"
          name = "map_builder"
          launch-prefix = "xterm -e"
          output = "screen"
    > </node>

    <node pkg = "surveillance_robot"  
          type = "robot_state.py" 
          name = "robot_state"
          launch-prefix = "xterm -e"
          output = "screen"
    > </node>

    <node pkg = "surveillance_robot"  
          type = "planner.py"
          name = "planner"
          launch-prefix = "xterm -e"
          output = "screen"
    > </node>
    
    <node pkg = "surveillance_robot"  
          type = "controller.py"
          name = "controller"
          launch-prefix = "xterm -e"
          output = "screen"
    > </node>






  
</launch>
